package com.example.f3.contract;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.DynamicStruct;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint64;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint8;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple4;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple6;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple8;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class HospitalCases extends Contract {
    public static final String[] BINARY_ARRAY = {"","","","50919050565b600061010083016000830151612fa160008601826131fc565b5060208301518482036020860152612fb982826130c5565b91505060408301518482036040860152612fd38282613192565b91505060608301518482036060860152612fed8282612ead565b915050608083015184820360808601526130078282612ead565b91505060a083015184820360a08601526130218282612ead565b91505060c083015184820360c086015261303b8282612ead565b91505060e083015184820360e08601526130558282612ead565b9150508091505092915050565b6000608083016000830151848203600086015261307f8282612ead565b9150506020830151613094602086018261320b565b5060408301516130a7604086018261320b565b5060608301516130ba606086018261320b565b508091505092915050565b600060808301600083015184820360008601526130e28282612ead565b91505060208301516130f7602086018261320b565b50604083015161310a604086018261320b565b50606083015161311d606086018261320b565b508091505092915050565b600060808301600083015184820360008601526131458282612ead565b915050602083015161315a602086018261320b565b50604083015161316d604086018261320b565b50606083015184820360608601526131858282612ead565b9150508091505092915050565b600060808301600083015184820360008601526131af8282612ead565b91505060208301516131c4602086018261320b565b5060408301516131d7604086018261320b565b50606083015184820360608601526131ef8282612ead565b9150508091505092915050565b613205816134e3565b82525050565b613214816134f7565b82525050565b600060208201905081810360008301526132348184612e3f565b905092915050565b600060808201905081810360008301526132568187612ead565b9050613265602083018661320b565b613272604083018561320b565b81810360608301526132848184612ead565b905095945050505050565b600060808201905081810360008301526132a98187612ead565b90506132b8602083018661320b565b6132c5604083018561320b565b6132d2606083018461320b565b95945050505050565b600060208201905081810360008301526132f481612ee3565b9050919050565b6000602082019050818103600083015261331481612f1a565b9050919050565b6000602082019050818103600083015261333481612f51565b9050919050565b600060208201905081810360008301526133558184613062565b905092915050565b600060208201905081810360008301526133778184613128565b905092915050565b600061010082019050613395600083018b6131fc565b81810360208301526133a7818a6130c5565b905081810360408301526133bb8189613192565b905081810360608301526133cf8188612ead565b905081810360808301526133e38187612ead565b905081810360a08301526133f78186612ead565b905081810360c083015261340b8185612ead565b905081810360e083015261341f8184612ead565b90509998505050505050505050565b6000604051905081810181811067ffffffffffffffff8211171561345157600080fd5b8060405250919050565b600067ffffffffffffffff82111561347257600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff82111561349e57600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600067ffffffffffffffff82169050919050565b600060ff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b8381101561356857808201518184015260208101905061354d565b83811115613577576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a7230582040c0c00bd8cac953dde97a90929897a77262274925d524ceb3be315096c2d6796c6578706572696d656e74616cf50037"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"60806040526000600460006101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506135c88061007d6000396000f3006080604052600436106100ba576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806305156a78146100bf5780630b5168e5146100ea5780632a324452146101135780635881d0a91461013c57806384d192fd1461017c578063a051c93f146101b9578063c5838df9146101f6578063ce1f63d714610233578063d4417ac81461025c578063dcb7c0b614610285578063e1a7190a146102ae578063fc7e103d146102ee575b600080fd5b3480156100cb57600080fd5b506100d4610332565b6040516100e1919061333b565b60405180910390f35b3480156100f657600080fd5b50610111600480360361010c9190810190612c80565b610483565b005b34801561011f57600080fd5b5061013a60048036036101359190810190612dfe565b610a83565b005b34801561014857600080fd5b50610163600480360361015e9190810190612c57565b610d4f565b604051610173949392919061328f565b60405180910390f35b34801561018857600080fd5b506101a3600480360361019e9190810190612c57565b610e3e565b6040516101b0919061321a565b60405180910390f35b3480156101c557600080fd5b506101e060048036036101db9190810190612c57565b6114db565b6040516101ed919061333b565b60405180910390f35b34801561020257600080fd5b5061021d60048036036102189190810190612c57565b6116bf565b60405161022a919061335d565b60405180910390f35b34801561023f57600080fd5b5061025a60048036036102559190810190612dbd565b611897565b005b34801561026857600080fd5b50610283600480360361027e9190810190612dfe565b611b68565b005b34801561029157600080fd5b506102ac60048036036102a79190810190612dbd565b611e35565b005b3480156102ba57600080fd5b506102d560048036036102d09190810190612c57565b612105565b6040516102e5949392919061323c565b60405180910390f35b3480156102fa57600080fd5b5061031560048036036103109190810190612d81565b61227f565b60405161032998979695949392919061337f565b60405180910390f35b61033a61287c565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060806040519081016040529081600082018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561041e5780601f106103f35761010080835404028352916020019161041e565b820191906000526020600020905b81548152906001019060200180831161040157829003601f168201915b505050505081526020016001820160009054906101000a900460ff1660ff1660ff1681526020016001820160019054906101000a900460ff1660ff1660ff1681526020016001820160029054906101000a900460ff1660ff1660ff1681525050905090565b61048b6128ae565b6004600081819054906101000a900467ffffffffffffffff168092919060010191906101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505061010060405190810160405280600460009054906101000a900467ffffffffffffffff1667ffffffffffffffff168152602001600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060806040519081016040529081600082018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105e95780601f106105be576101008083540402835291602001916105e9565b820191906000526020600020905b8154815290600101906020018083116105cc57829003601f168201915b505050505081526020016001820160009054906101000a900460ff1660ff1660ff1681526020016001820160019054906101000a900460ff1660ff1660ff1681526020016001820160029054906101000a900460ff1660ff1660ff16815250508152602001600160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060806040519081016040529081600082018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107325780601f1061070757610100808354040283529160200191610732565b820191906000526020600020905b81548152906001019060200180831161071557829003601f168201915b505050505081526020016001820160009054906101000a900460ff1660ff1660ff1681526020016001820160019054906101000a900460ff1660ff1660ff168152602001600282018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561080e5780601f106107e35761010080835404028352916020019161080e565b820191906000526020600020905b8154815290600101906020018083116107f157829003601f168201915b5050505050815250508152602001878152602001868152602001858152602001848152602001838152509050600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819080600181540180825580915050906001820390600052602060002090600b02016000909192909190915060008201518160000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060208201518160010160008201518160000190805190602001906108f992919061290a565b5060208201518160010160006101000a81548160ff021916908360ff16021790555060408201518160010160016101000a81548160ff021916908360ff16021790555060608201518160010160026101000a81548160ff021916908360ff1602179055505050604082015181600301600082015181600001908051906020019061098492919061290a565b5060208201518160010160006101000a81548160ff021916908360ff16021790555060408201518160010160016101000a81548160ff021916908360ff16021790555060608201518160020190805190602001906109e392919061290a565b5050506060820151816006019080519060200190610a0292919061290a565b506080820151816007019080519060200190610a1f92919061290a565b5060a0820151816008019080519060200190610a3c92919061290a565b5060c0820151816009019080519060200190610a5992919061290a565b5060e082015181600a019080519060200190610a7692919061290a565b5050505050505050505050565b6060600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610b5b5780601f10610b3057610100808354040283529160200191610b5b565b820191906000526020600020905b815481529060010190602001808311610b3e57829003601f168201915b50505050509050604051806000019050604051809103902060001916816040516020018082805190602001908083835b602083101515610bb05780518252602082019150602081019050602083039250610b8b565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b602083101515610c195780518252602082019150602081019050602083039250610bf4565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916141515610c8c576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401610c83906132db565b60405180910390fd5b81600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000019080519060200190610ce892919061290a565b5060208201518160010160006101000a81548160ff021916908360ff16021790555060408201518160010160016101000a81548160ff021916908360ff1602179055506060820151816002019080519060200190610d4792919061290a565b509050505050565b6002602052806000526040600020600091509050806000018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610dfb5780601f10610dd057610100808354040283529160200191610dfb565b820191906000526020600020905b815481529060010190602001808311610dde57829003601f168201915b5050505050908060010160009054906101000a900460ff16908060010160019054906101000a900460ff16908060010160029054906101000a900460ff16905084565b6060600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b828210156114d057838290600052602060002090600b020161010060405190810160405290816000820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160806040519081016040529081600082018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610fa05780601f10610f7557610100808354040283529160200191610fa0565b82019190600052602060002090","","50019150506040516020818303038152906040526040518082805190602001908083835b602083101515611fcb5780518252602082019150602081019050602083039250611fa6565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191614151561203e576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401612035906132db565b60405180910390fd5b81600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082015181600001908051906020019061209a92919061290a565b5060208201518160010160006101000a81548160ff021916908360ff16021790555060408201518160010160016101000a81548160ff021916908360ff16021790555060608201518160010160026101000a81548160ff021916908360ff1602179055509050505050565b6001602052806000526040600020600091509050806000018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156121b15780601f10612186576101008083540402835291602001916121b1565b820191906000526020600020905b81548152906001019060200180831161219457829003601f168201915b5050505050908060010160009054906101000a900460ff16908060010160019054906101000a900460ff1690806002018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156122755780601f1061224a57610100808354040283529160200191612275565b820191906000526020600020905b81548152906001019060200180831161225857829003601f168201915b5050505050905084565b60036020528160005260406000208181548110151561229a57fe5b90600052602060002090600b0201600091509150508060000160009054906101000a900467ffffffffffffffff16908060010160806040519081016040529081600082018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156123725780601f1061234757610100808354040283529160200191612372565b820191906000526020600020905b81548152906001019060200180831161235557829003601f168201915b505050505081526020016001820160009054906101000a900460ff1660ff1660ff1681526020016001820160019054906101000a900460ff1660ff1660ff1681526020016001820160029054906101000a900460ff1660ff1660ff1681525050908060030160806040519081016040529081600082018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561247c5780601f106124515761010080835404028352916020019161247c565b820191906000526020600020905b81548152906001019060200180831161245f57829003601f168201915b505050505081526020016001820160009054906101000a900460ff1660ff1660ff1681526020016001820160019054906101000a900460ff1660ff1660ff168152602001600282018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156125585780601f1061252d57610100808354040283529160200191612558565b820191906000526020600020905b81548152906001019060200180831161253b57829003601f168201915b50505050508152505090806006018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156125fa5780601f106125cf576101008083540402835291602001916125fa565b820191906000526020600020905b8154815290600101906020018083116125dd57829003601f168201915b505050505090806007018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156126985780601f1061266d57610100808354040283529160200191612698565b820191906000526020600020905b81548152906001019060200180831161267b57829003601f168201915b505050505090806008018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156127365780601f1061270b57610100808354040283529160200191612736565b820191906000526020600020905b81548152906001019060200180831161271957829003601f168201915b505050505090806009018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156127d45780601f106127a9576101008083540402835291602001916127d4565b820191906000526020600020905b8154815290600101906020018083116127b757829003601f168201915b50505050509080600a018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156128725780601f1061284757610100808354040283529160200191612872565b820191906000526020600020905b81548152906001019060200180831161285557829003601f168201915b5050505050905088565b60806040519081016040528060608152602001600060ff168152602001600060ff168152602001600060ff1681525090565b6101c060405190810160405280600067ffffffffffffffff1681526020016128d46129b9565b81526020016128e16129eb565b815260200160608152602001606081526020016060815260200160608152602001606081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061294b57805160ff1916838001178555612979565b82800160010185558215612979579182015b8281111561297857825182559160200191906001019061295d565b5b5090506129869190612a1a565b5090565b60806040519081016040528060608152602001600060ff168152602001600060ff168152602001606081525090565b60806040519081016040528060608152602001600060ff168152602001600060ff168152602001600060ff1681525090565b60806040519081016040528060608152602001600060ff168152602001600060ff168152602001606081525090565b612a3c91905b80821115612a38576000816000905550600101612a20565b5090565b90565b6000612a4b8235613504565b905092915050565b600082601f8301121515612a6657600080fd5b8135612a79612a748261345b565b61342e565b91508082526020830160208301858383011115612a9557600080fd5b612aa083828461353b565b50505092915050565b600082601f8301121515612abc57600080fd5b8135612acf612aca82613487565b61342e565b91508082526020830160208301858383011115612aeb57600080fd5b612af683828461353b565b50505092915050565b600060808284031215612b1157600080fd5b612b1b608061342e565b9050600082013567ffffffffffffffff811115612b3757600080fd5b612b4384828501612a53565b6000830152506020612b5784828501612c43565b6020830152506040612b6b84828501612c43565b6040830152506060612b7f84828501612c43565b60608301525092915050565b600060808284031215612b9d57600080fd5b612ba7608061342e565b9050600082013567ffffffffffffffff811115612bc357600080fd5b612bcf84828501612a53565b6000830152506020612be384828501612c43565b6020830152506040612bf784828501612c43565b604083015250606082013567ffffffffffffffff811115612c1757600080fd5b612c2384828501612a53565b60608301525092915050565b6000612c3b8235613524565b905092915050565b6000612c4f823561352e565b905092915050565b600060208284031215612c6957600080fd5b6000612c7784828501612a3f565b91505092915050565b60008060008060008060c08789031215612c9957600080fd5b6000612ca789828a01612a3f565b965050602087013567ffffffffffffffff811115612cc457600080fd5b612cd089828a01612aa9565b955050604087013567ffffffffffffffff811115612ced57600080fd5b612cf989828a01612aa9565b945050606087013567ffffffffffffffff811115612d1657600080fd5b612d2289828a01612aa9565b935050608087013567ffffffffffffffff811115612d3f57600080fd5b612d4b89828a01612aa9565b92505060a087013567ffffffffffffffff811115612d6857600080fd5b612d7489828a01612aa9565b9150509295509295509295565b60008060408385031215612d9457600080fd5b6000612da285828601612a3f565b9250506020612db385828601612c2f565b9150509250929050565b600060208284031215612dcf57600080fd5b600082013567ffffffffffffffff811115612de957600080fd5b612df584828501612aff565b91505092915050565b600060208284031215612e1057600080fd5b600082013567ffffffffffffffff811115612e2a57600080fd5b612e3684828501612b8b565b91505092915050565b6000612e4a826134c0565b80845260208401935083602082028501612e63856134b3565b60005b84811015612e9c578383038852612e7e838351612f88565b9250612e89826134d6565b9150602088019750600181019050612e66565b508196508694505050505092915050565b6000612eb8826134cb565b808452612ecc81602086016020860161354a565b612ed58161357d565b602085010191505092915050565b6000600e82527f75736572206861732065786973740000000000000000000000000000000000006020830152604082019050919050565b6000600e82527f75736572206e6f742065786973740000000000000000000000000000000000006020830152604082019050919050565b6000600a82527f6f6e6c792061646d696e0000000000000000000000000000000000000000000060208301526040820190","50919050565b600061010083016000830151612fa160008601826131fc565b5060208301518482036020860152612fb982826130c5565b91505060408301518482036040860152612fd38282613192565b91505060608301518482036060860152612fed8282612ead565b915050608083015184820360808601526130078282612ead565b91505060a083015184820360a08601526130218282612ead565b91505060c083015184820360c086015261303b8282612ead565b91505060e083015184820360e08601526130558282612ead565b9150508091505092915050565b6000608083016000830151848203600086015261307f8282612ead565b9150506020830151613094602086018261320b565b5060408301516130a7604086018261320b565b5060608301516130ba606086018261320b565b508091505092915050565b600060808301600083015184820360008601526130e28282612ead565b91505060208301516130f7602086018261320b565b50604083015161310a604086018261320b565b50606083015161311d606086018261320b565b508091505092915050565b600060808301600083015184820360008601526131458282612ead565b915050602083015161315a602086018261320b565b50604083015161316d604086018261320b565b50606083015184820360608601526131858282612ead565b9150508091505092915050565b600060808301600083015184820360008601526131af8282612ead565b91505060208301516131c4602086018261320b565b5060408301516131d7604086018261320b565b50606083015184820360608601526131ef8282612ead565b9150508091505092915050565b613205816134e3565b82525050565b613214816134f7565b82525050565b600060208201905081810360008301526132348184612e3f565b905092915050565b600060808201905081810360008301526132568187612ead565b9050613265602083018661320b565b613272604083018561320b565b81810360608301526132848184612ead565b905095945050505050565b600060808201905081810360008301526132a98187612ead565b90506132b8602083018661320b565b6132c5604083018561320b565b6132d2606083018461320b565b95945050505050565b600060208201905081810360008301526132f481612ee3565b9050919050565b6000602082019050818103600083015261331481612f1a565b9050919050565b6000602082019050818103600083015261333481612f51565b9050919050565b600060208201905081810360008301526133558184613062565b905092915050565b600060208201905081810360008301526133778184613128565b905092915050565b600061010082019050613395600083018b6131fc565b81810360208301526133a7818a6130c5565b905081810360408301526133bb8189613192565b905081810360608301526133cf8188612ead565b905081810360808301526133e38187612ead565b905081810360a08301526133f78186612ead565b905081810360c083015261340b8185612ead565b905081810360e083015261341f8184612ead565b90509998505050505050505050565b6000604051905081810181811067ffffffffffffffff8211171561345157600080fd5b8060405250919050565b600067ffffffffffffffff82111561347257600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff82111561349e57600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600067ffffffffffffffff82169050919050565b600060ff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b8381101561356857808201518184015260208101905061354d565b83811115613577576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a72305820fe9a9ea666e9be4120781e0872a2524957de6eaab4cc912eab6a38c3a557ed816c6578706572696d656e74616cf50037"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":false,\"inputs\":[{\"components\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"sex\",\"type\":\"uint8\"},{\"name\":\"age\",\"type\":\"uint8\"},{\"name\":\"workYear\",\"type\":\"uint8\"}],\"name\":\"d\",\"type\":\"tuple\"}],\"name\":\"updateDoctor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"queryMySelf\",\"outputs\":[{\"components\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"sex\",\"type\":\"uint8\"},{\"name\":\"age\",\"type\":\"uint8\"},{\"name\":\"workYear\",\"type\":\"uint8\"}],\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_patient\",\"type\":\"address\"},{\"name\":\"_appointmentType\",\"type\":\"string\"},{\"name\":\"_appointmentTime\",\"type\":\"string\"},{\"name\":\"_description\",\"type\":\"string\"},{\"name\":\"_prescription\",\"type\":\"string\"},{\"name\":\"_money\",\"type\":\"string\"}],\"name\":\"addCases\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"doctorMap\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"sex\",\"type\":\"uint8\"},{\"name\":\"age\",\"type\":\"uint8\"},{\"name\":\"workYear\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"patientMap\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"sex\",\"type\":\"uint8\"},{\"name\":\"age\",\"type\":\"uint8\"},{\"name\":\"dataBirth\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cases\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint64\"},{\"components\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"sex\",\"type\":\"uint8\"},{\"name\":\"age\",\"type\":\"uint8\"},{\"name\":\"workYear\",\"type\":\"uint8\"}],\"name\":\"doctor\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"sex\",\"type\":\"uint8\"},{\"name\":\"age\",\"type\":\"uint8\"},{\"name\":\"dataBirth\",\"type\":\"string\"}],\"name\":\"patient\",\"type\":\"tuple\"},{\"name\":\"appointmentType\",\"type\":\"string\"},{\"name\":\"appointmentTime\",\"type\":\"string\"},{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"prescription\",\"type\":\"string\"},{\"name\":\"money\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"components\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"sex\",\"type\":\"uint8\"},{\"name\":\"age\",\"type\":\"uint8\"},{\"name\":\"workYear\",\"type\":\"uint8\"}],\"name\":\"d\",\"type\":\"tuple\"}],\"name\":\"addDoctor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"queryCases\",\"outputs\":[{\"components\":[{\"name\":\"id\",\"type\":\"uint64\"},{\"components\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"sex\",\"type\":\"uint8\"},{\"name\":\"age\",\"type\":\"uint8\"},{\"name\":\"workYear\",\"type\":\"uint8\"}],\"name\":\"doctor\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"sex\",\"type\":\"uint8\"},{\"name\":\"age\",\"type\":\"uint8\"},{\"name\":\"dataBirth\",\"type\":\"string\"}],\"name\":\"patient\",\"type\":\"tuple\"},{\"name\":\"appointmentType\",\"type\":\"string\"},{\"name\":\"appointmentTime\",\"type\":\"string\"},{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"prescription\",\"type\":\"string\"},{\"name\":\"money\",\"type\":\"string\"}],\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"queryDoctor\",\"outputs\":[{\"components\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"sex\",\"type\":\"uint8\"},{\"name\":\"age\",\"type\":\"uint8\"},{\"name\":\"workYear\",\"type\":\"uint8\"}],\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"queryPatient\",\"outputs\":[{\"components\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"sex\",\"type\":\"uint8\"},{\"name\":\"age\",\"type\":\"uint8\"},{\"name\":\"dataBirth\",\"type\":\"string\"}],\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"components\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"sex\",\"type\":\"uint8\"},{\"name\":\"age\",\"type\":\"uint8\"},{\"name\":\"dataBirth\",\"type\":\"string\"}],\"name\":\"p\",\"type\":\"tuple\"}],\"name\":\"updatePatient\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"components\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"sex\",\"type\":\"uint8\"},{\"name\":\"age\",\"type\":\"uint8\"},{\"name\":\"dataBirth\",\"type\":\"string\"}],\"name\":\"p\",\"type\":\"tuple\"}],\"name\":\"addPatient\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_UPDATEDOCTOR = "updateDoctor";

    public static final String FUNC_QUERYMYSELF = "queryMySelf";

    public static final String FUNC_ADDCASES = "addCases";

    public static final String FUNC_DOCTORMAP = "doctorMap";

    public static final String FUNC_PATIENTMAP = "patientMap";

    public static final String FUNC_CASES = "cases";

    public static final String FUNC_ADDDOCTOR = "addDoctor";

    public static final String FUNC_QUERYCASES = "queryCases";

    public static final String FUNC_QUERYDOCTOR = "queryDoctor";

    public static final String FUNC_QUERYPATIENT = "queryPatient";

    public static final String FUNC_UPDATEPATIENT = "updatePatient";

    public static final String FUNC_ADDPATIENT = "addPatient";

    protected HospitalCases(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public TransactionReceipt updateDoctor(DoctorInfo d) {
        final Function function = new Function(
                FUNC_UPDATEDOCTOR, 
                Arrays.<Type>asList(d), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] updateDoctor(DoctorInfo d, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATEDOCTOR, 
                Arrays.<Type>asList(d), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdateDoctor(DoctorInfo d) {
        final Function function = new Function(
                FUNC_UPDATEDOCTOR, 
                Arrays.<Type>asList(d), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<DoctorInfo> getUpdateDoctorInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATEDOCTOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DoctorInfo>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<DoctorInfo>(

                (DoctorInfo) results.get(0)
                );
    }

    public DoctorInfo queryMySelf() throws ContractException {
        final Function function = new Function(FUNC_QUERYMYSELF, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DoctorInfo>() {}));
        return executeCallWithSingleValueReturn(function, DoctorInfo.class);
    }

    public TransactionReceipt addCases(String _patient, String _appointmentType, String _appointmentTime, String _description, String _prescription, String _money) {
        final Function function = new Function(
                FUNC_ADDCASES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_patient), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_appointmentType), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_appointmentTime), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_description), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_prescription), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_money)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] addCases(String _patient, String _appointmentType, String _appointmentTime, String _description, String _prescription, String _money, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDCASES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_patient), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_appointmentType), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_appointmentTime), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_description), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_prescription), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_money)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddCases(String _patient, String _appointmentType, String _appointmentTime, String _description, String _prescription, String _money) {
        final Function function = new Function(
                FUNC_ADDCASES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_patient), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_appointmentType), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_appointmentTime), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_description), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_prescription), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_money)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple6<String, String, String, String, String, String> getAddCasesInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDCASES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple6<String, String, String, String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (String) results.get(3).getValue(), 
                (String) results.get(4).getValue(), 
                (String) results.get(5).getValue()
                );
    }

    public Tuple4<String, BigInteger, BigInteger, BigInteger> doctorMap(String param0) throws ContractException {
        final Function function = new Function(FUNC_DOCTORMAP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple4<String, BigInteger, BigInteger, BigInteger>(
                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue());
    }

    public Tuple4<String, BigInteger, BigInteger, String> patientMap(String param0) throws ContractException {
        final Function function = new Function(FUNC_PATIENTMAP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple4<String, BigInteger, BigInteger, String>(
                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (String) results.get(3).getValue());
    }

    public Tuple8<BigInteger, DoctorInfo, PatientInfo, String, String, String, String, String> cases(String param0, BigInteger param1) throws ContractException {
        final Function function = new Function(FUNC_CASES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(param0), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {}, new TypeReference<DoctorInfo>() {}, new TypeReference<PatientInfo>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple8<BigInteger, DoctorInfo, PatientInfo, String, String, String, String, String>(
                (BigInteger) results.get(0).getValue(), 
                (DoctorInfo) results.get(1),
                (PatientInfo) results.get(2),
                (String) results.get(3).getValue(), 
                (String) results.get(4).getValue(), 
                (String) results.get(5).getValue(), 
                (String) results.get(6).getValue(), 
                (String) results.get(7).getValue());
    }

    public TransactionReceipt addDoctor(DoctorInfo d) {
        final Function function = new Function(
                FUNC_ADDDOCTOR, 
                Arrays.<Type>asList(d), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] addDoctor(DoctorInfo d, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDDOCTOR, 
                Arrays.<Type>asList(d), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddDoctor(DoctorInfo d) {
        final Function function = new Function(
                FUNC_ADDDOCTOR, 
                Arrays.<Type>asList(d), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<DoctorInfo> getAddDoctorInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDDOCTOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DoctorInfo>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<DoctorInfo>(

                (DoctorInfo) results.get(0)
                );
    }

    public DynamicArray<Cases> queryCases(String addr) throws ContractException {
        final Function function = new Function(FUNC_QUERYCASES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Cases>>() {}));
        return executeCallWithSingleValueReturn(function, DynamicArray.class);
    }

    public DoctorInfo queryDoctor(String addr) throws ContractException {
        final Function function = new Function(FUNC_QUERYDOCTOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DoctorInfo>() {}));
        return executeCallWithSingleValueReturn(function, DoctorInfo.class);
    }

    public PatientInfo queryPatient(String addr) throws ContractException {
        final Function function = new Function(FUNC_QUERYPATIENT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<PatientInfo>() {}));
        return executeCallWithSingleValueReturn(function, PatientInfo.class);
    }

    public TransactionReceipt updatePatient(PatientInfo p) {
        final Function function = new Function(
                FUNC_UPDATEPATIENT, 
                Arrays.<Type>asList(p), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] updatePatient(PatientInfo p, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATEPATIENT, 
                Arrays.<Type>asList(p), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdatePatient(PatientInfo p) {
        final Function function = new Function(
                FUNC_UPDATEPATIENT, 
                Arrays.<Type>asList(p), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<PatientInfo> getUpdatePatientInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATEPATIENT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<PatientInfo>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<PatientInfo>(

                (PatientInfo) results.get(0)
                );
    }

    public TransactionReceipt addPatient(PatientInfo p) {
        DynamicStruct dynamicStruct = new DynamicStruct(p);
        final Function function = new Function(
                FUNC_ADDPATIENT, 
                Arrays.<Type>asList(dynamicStruct),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] addPatient(PatientInfo p, TransactionCallback callback) {
        DynamicStruct dynamicStruct = new DynamicStruct(p);
        final Function function = new Function(
                FUNC_ADDPATIENT, 
                Arrays.<Type>asList(p), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddPatient(PatientInfo p) {
        final Function function = new Function(
                FUNC_ADDPATIENT, 
                Arrays.<Type>asList(p), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<PatientInfo> getAddPatientInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDPATIENT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<PatientInfo>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<PatientInfo>(

                (PatientInfo) results.get(0)
                );
    }

    public static HospitalCases load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new HospitalCases(contractAddress, client, credential);
    }

    public static HospitalCases deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(HospitalCases.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }

    public static class DoctorInfo extends DynamicStruct {
        public String name;

        public BigInteger sex;

        public BigInteger age;

        public BigInteger workYear;

        public DoctorInfo(Utf8String name, Uint8 sex, Uint8 age, Uint8 workYear) {
            super(name,sex,age,workYear);
            this.name = name.getValue();
            this.sex = sex.getValue();
            this.age = age.getValue();
            this.workYear = workYear.getValue();
        }

        public DoctorInfo(String name, BigInteger sex, BigInteger age, BigInteger workYear) {
            super(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name),new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(sex),new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(age),new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(workYear));
            this.name = name;
            this.sex = sex;
            this.age = age;
            this.workYear = workYear;
        }

        public DoctorInfo() {
            super(Utf8String.DEFAULT,Uint8.DEFAULT,Uint8.DEFAULT,Uint8.DEFAULT);
            this.name="";
            this.age=BigInteger.ZERO;
            this.sex=BigInteger.ZERO;
            this.workYear=BigInteger.ZERO;
        }
    }

    public static class PatientInfo extends DynamicStruct {
        public String name;

        public BigInteger sex;

        public BigInteger age;

        public String dataBirth;
        public PatientInfo(){
            super(Utf8String.DEFAULT,Uint8.DEFAULT,Uint8.DEFAULT,Utf8String.DEFAULT);
        }


        public PatientInfo(Utf8String name, Uint8 sex, Uint8 age, Utf8String dataBirth) {
            super(name,sex,age,dataBirth);
            this.name = name.getValue();
            this.sex = sex.getValue();
            this.age = age.getValue();
            this.dataBirth = dataBirth.getValue();
        }

        public PatientInfo(String name, BigInteger sex, BigInteger age, String dataBirth) {
            super(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name),new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(sex),new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(age),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(dataBirth));
            this.name = name;
            this.sex = sex;
            this.age = age;
            this.dataBirth = dataBirth;
        }
    }

    public static class Cases extends DynamicStruct {
        public BigInteger id;

        public DoctorInfo doctor;

        public PatientInfo patient;

        public String appointmentType;

        public String appointmentTime;

        public String description;

        public String prescription;

        public String money;
        public Cases(){
            super(Uint64.DEFAULT);
        }

        public Cases(Uint64 id, DoctorInfo doctor, PatientInfo patient, Utf8String appointmentType, Utf8String appointmentTime, Utf8String description, Utf8String prescription, Utf8String money) {
            super(id,doctor,patient,appointmentType,appointmentTime,description,prescription,money);
            this.id = id.getValue();
            this.doctor = doctor;
            this.patient = patient;
            this.appointmentType = appointmentType.getValue();
            this.appointmentTime = appointmentTime.getValue();
            this.description = description.getValue();
            this.prescription = prescription.getValue();
            this.money = money.getValue();
        }

        public Cases(BigInteger id, DoctorInfo doctor, PatientInfo patient, String appointmentType, String appointmentTime, String description, String prescription, String money) {
            super(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint64(id),doctor,patient,new org.fisco.bcos.sdk.abi.datatypes.Utf8String(appointmentType),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(appointmentTime),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(description),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(prescription),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(money));
            this.id = id;
            this.doctor = doctor;
            this.patient = patient;
            this.appointmentType = appointmentType;
            this.appointmentTime = appointmentTime;
            this.description = description;
            this.prescription = prescription;
            this.money = money;
        }
    }
}
